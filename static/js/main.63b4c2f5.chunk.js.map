{"version":3,"sources":["components/SiteHead/index.js","components/Card/index.js","components/ListHeader/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["SiteHead","className","Card","props","alt","last","src","image","title","first","gender","age","phone","email","ListHeader","state","alphabetical","ascending","sortedEmployees","employees","sortName","sortEmp","empList","sort","a","b","nameA","name","toLowerCase","nameB","setState","sortAge","dob","this","length","prevProps","onClick","map","item","index","picture","large","cell","React","Component","Navbar","searchTerm","filteredEmployees","handleInputChange","event","target","value","userTyped","filteredList","filter","indexOf","onChange","type","placeholder","App","axios","get","then","res","data","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63b4c2f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SiteHead() {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"title\">\r\n                Employee Directory\r\n    </div>\r\n            <br></br>\r\n            <div className=\"tagline\">\r\n                Retrive Employee Information Anytime Anywhere \r\n    </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default SiteHead;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div><img alt={props.last} src={props.image}></img></div>\r\n            <div>{props.title} {props.first} {props.last} </div>\r\n            <div>{props.gender}</div>\r\n            <div>{props.age}</div>\r\n            <div>{props.phone}</div>\r\n            <div>{props.email}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Card from '../Card';\r\n\r\nclass ListHeader extends React.Component {\r\n\r\n    state = {\r\n        alphabetical: true,\r\n        ascending: true,\r\n        sortedEmployees: [],\r\n        employees: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.sortedEmployees.length < 1) {\r\n            this.setState({\r\n                sortedEmployees: this.props.empList\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.empList !== prevProps.empList) {\r\n            this.setState({\r\n                sortedEmployees: this.props.empList\r\n            })\r\n        }\r\n    }\r\n\r\n    sortName = () => {\r\n        let sortEmp = [];\r\n        if (this.state.alphabetical) {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n                if (nameA < nameB)\r\n                    return -1\r\n                if (nameA > nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        } else {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n                if (nameA > nameB)\r\n                    return -1\r\n                if (nameA < nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        }\r\n        this.setState({\r\n            alphabetical: !this.state.alphabetical,\r\n            sortedEmployees: sortEmp\r\n\r\n        })\r\n    }\r\n\r\n    sortAge = () => {\r\n        let sortEmp = [];\r\n        if (this.state.ascending) {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.dob.age, nameB = b.dob.age;\r\n                if (nameA < nameB)\r\n                    return -1\r\n                if (nameA > nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        } else {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.dob.age, nameB = b.dob.age;\r\n                if (nameA > nameB)\r\n                    return -1\r\n                if (nameA < nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        }\r\n        this.setState({\r\n            ascending: !this.state.ascending,\r\n            sortedEmployees: sortEmp\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <div className=\"header\">\r\n                    <div>Photo</div>\r\n                    <div><p onClick={this.sortName} className=\"name\">Name</p> </div>\r\n                    <div>Gender</div>\r\n                    <div><p onClick={this.sortAge} className=\"age\">Age</p></div>\r\n                    <div>Phone</div>\r\n                    <div>E-mail</div>\r\n                </div>\r\n\r\n                {\r\n                    this.state.sortedEmployees.length > 0 &&\r\n                    this.state.sortedEmployees.map((item, index) => (\r\n\r\n                            <Card\r\n                                image={item.picture.large}\r\n                                first={item.name.first}\r\n                                last={item.name.last}\r\n                                // title={item.name.title}\r\n                                gender={item.gender}\r\n                                age={item.dob.age}\r\n                                phone={item.cell}\r\n                                email={item.email}\r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListHeader;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport ListHeader from '../ListHeader';\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    state = {\r\n        searchTerm: \"\",\r\n        filteredEmployees: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.filteredEmployees.length < 1) {\r\n            this.setState({\r\n                filteredEmployees: this.props.employees\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleInputChange = event => {\r\n        this.setState({\r\n            searchTerm: event.target.value\r\n        });\r\n        let userTyped = event.target.value;\r\n        const filteredList = this.props.employees.filter((item) => {\r\n            let values = item.name.title + item.name.first + item.name.last + item.gender + item.dob.age + item.email + item.cell;\r\n            return values.indexOf(userTyped) !== -1;\r\n\r\n        });\r\n\r\n        this.setState({\r\n            filteredEmployees: filteredList\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form\">\r\n                    <input\r\n                        value={this.state.searchTerm}\r\n                        name=\"searchTerm\"\r\n                        onChange={event => this.handleInputChange(event)}\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                    />\r\n                </form>\r\n                {this.state.filteredEmployees.length > 0 &&\r\n                    <ListHeader empList={this.state.filteredEmployees} />\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport SiteHead from './components/SiteHead';\nimport Navbar from './components/Navbar';\n\n\nclass App extends React.Component {\n\n  state = {\n    employees: [],\n  };\n\n  componentDidMount() {\n      axios.get(`https://randomuser.me/api/?results=20&nat=Aus`)\n        .then(res => {\n          this.setState({ employees: res.data.results });\n        });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SiteHead />\n        {this.state.employees.length > 0 &&\n        <Navbar employees={this.state.employees}/>\n  }\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}